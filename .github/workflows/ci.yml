name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: {}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  compose-validate:
    name: Docker Compose Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create minimal .env for compose validation
        run: |
          awk 'NF && $0 !~ /CLOUDFLARE_API_TOKEN/ {print}' .env.example > .env
          # Provide safe dummy secrets / required vars
          echo 'CLOUDFLARE_API_TOKEN=dummy_token' >> .env
          echo 'QBITTORRENT_USER=dummy' >> .env
          echo 'QBITTORRENT_PASS=dummy_pass' >> .env
          echo 'WATCHTOWER_SCHEDULE=0 0 4 * * *' >> .env
          # Intentionally leave CLEAN_SUBTITLES_DIRECTORY unset to exercise fallback path
      - name: Validate docker-compose.yml
        run: docker compose config > /dev/null

  lint-js:
    name: JS Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node & pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.16.1
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: pnpm
      - name: Install deps
        run: pnpm install --frozen-lockfile
      - name: Lint
        run: pnpm lint .

  python:
    name: Python Lint & Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: scripts/requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
      - name: Create minimal .env for tests
        run: echo 'API_KEY_PROWLARR=dummy_api_key_for_ci' > .env
      - name: Ruff Lint
        run: python -m ruff check scripts
      - name: Run legacy script test harness
        run: python scripts/test-scripts.py
      - name: Run unit tests (pytest)
        run: python -m pytest -q scripts/tests

  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [compose-validate, lint-js, python]
    if: always()
    steps:
      - name: Report job results
        run: |
          echo "Compose: ${{ needs.compose-validate.result }}"
          echo "JS Lint: ${{ needs.lint-js.result }}"
          echo "Python: ${{ needs.python.result }}"
          if [ '${{ needs.compose-validate.result }}' != 'success' ] || [ '${{ needs.lint-js.result }}' != 'success' ] || [ '${{ needs.python.result }}' != 'success' ]; then
            echo 'One or more jobs failed.'
            exit 1
          fi
